{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "35248fc3",
   "metadata": {},
   "outputs": [],
   "source": [
    "# PASSWORD MANAGER:\n",
    "  \n",
    "\n",
    "class BasePasswordManager():\n",
    "      def __init__(self):\n",
    "            self.old_password={'Roshan':['password','Roshanmis@21'],'ankush':['ankush@com' , 'ankush123'], 'sanket':['sanket@123' , '98098'], \n",
    "                'harsh':['harsh@54321' , '990908']}\n",
    "      def get_password(self,user):\n",
    "            if self.old_password.get(user)==None:\n",
    "                   return \"No user available\"\n",
    "            else:\n",
    "                   return(self.old_password[user])[-1]\n",
    "      def is_correct(self,user,password):\n",
    "            if self.get_password(user) == password:\n",
    "                 return \"Your password is Correct!\"\n",
    "            else:\n",
    "                   return \"Your password is Incorrect!\"\n",
    "\n",
    "class PasswordManager(BasePasswordManager):\n",
    "      def __init__(self):\n",
    "           super().__init__()\n",
    "      def set_password(self,user,password):\n",
    "            if self.old_password.get(user) == None:\n",
    "                if len(password)>=6:\n",
    "                      self.old_password[user]=[password]\n",
    "                else:\n",
    "                       return \"The password length is short\"\n",
    "            else:\n",
    "                   if len(password)>=6:\n",
    "                       var1=self.get_level(self.get_password(user))\n",
    "                       var2=self.get_level(password)\n",
    "                   if var2>var1:\n",
    "                        self.old_password[user]=[password]\n",
    "                   else:\n",
    "                          return \"Password is weak\"\n",
    "      def get_level(self,password):\n",
    "           if password.isdigit() or password.isalpha():\n",
    "                  return \"Your password is Crackable Weak!\"\n",
    "           elif password.isalnum():\n",
    "                  return \"Password is Moderate!\"\n",
    "           else:\n",
    "                  return \" Password is Strong & Good!\"\n",
    "\n",
    "\n",
    "x=PasswordManager()\n",
    "\n",
    "while(True):\n",
    "        checker=int(input(\"\\n Press 1 for Checking Password Strength \\n Press 2 for adding New Entity \\n Press 3 for Viewing all the Entities \\n Press 0 for Exit \\n\"));\n",
    "        if checker==1:\n",
    "             passToCheck=input(\"Please Provide A Password To Check:\")\n",
    "             print(f\"\\n {passToCheck}\",x.get_level(passToCheck))\n",
    "        elif checker==2:\n",
    "              newName=input(\"Enter Your Id: \")\n",
    "              newPass=input(\"Enter A New Password : \")\n",
    "              x.set_password(newName,newPass)\n",
    "              print(\"\\n New Entity Added Sucessfully !!! \\n\")\n",
    "        elif checker==3:\n",
    "              print(f\"All {len(x.old_password)} Entities Are : \\n\",x.old_password)\n",
    "        elif  checker ==0:\n",
    "              break\n",
    "        else :\n",
    "               print(\"Invalid Choice .Please Re Check Your Choice. Thank You!\")\n",
    "       \n",
    "\n",
    "\n",
    "              \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cd61f1ff",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
